// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rsk.Saml.IdentityProvider.Storage.EntityFramework.DbContexts;

#nullable disable

namespace IdP.Migrations.SamlConfigurationDb
{
    [DbContext(typeof(SamlConfigurationDbContext))]
    [Migration("20240312143149_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ArtifactResolutionService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Binding")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("ServiceProviderArtifactResolutionServices", (string)null);
                });

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.AssertionConsumerService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Binding")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("ServiceProviderAssertionConsumerServices", (string)null);
                });

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SamlClaimMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NewClaimType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OriginalClaimType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("ServiceProviderClaimMappings", (string)null);
                });

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowIdpInitiatedSso")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ArtifactDeliveryBindingType")
                        .HasColumnType("longtext");

                    b.Property<bool>("EncryptAssertions")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("EncryptionCertificate")
                        .HasColumnType("longblob");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameIdentifierFormat")
                        .HasColumnType("longtext");

                    b.Property<bool?>("RequireAuthenticationRequestsSigned")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequireSamlMessageDestination")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RequireSignedArtifactResolveRequests")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RequireSignedArtifactResponses")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SignAssertions")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("ServiceProviders", (string)null);
                });

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SigningCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Certificate")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("ServiceProviderSignCertificates", (string)null);
                });

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SingleLogoutService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Binding")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("ServiceProviderSingleLogoutServices", (string)null);
                });

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ArtifactResolutionService", b =>
                {
                    b.HasOne("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", "ServiceProvider")
                        .WithMany("ArtifactResolutionServices")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.AssertionConsumerService", b =>
                {
                    b.HasOne("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", "ServiceProvider")
                        .WithMany("AssertionConsumerServices")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SamlClaimMap", b =>
                {
                    b.HasOne("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", "ServiceProvider")
                        .WithMany("ClaimsMapping")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SigningCertificate", b =>
                {
                    b.HasOne("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", "ServiceProvider")
                        .WithMany("SigningCertificates")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.SingleLogoutService", b =>
                {
                    b.HasOne("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", "ServiceProvider")
                        .WithMany("SingleLogoutServices")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Rsk.Saml.IdentityProvider.Storage.EntityFramework.Entities.ServiceProvider", b =>
                {
                    b.Navigation("ArtifactResolutionServices");

                    b.Navigation("AssertionConsumerServices");

                    b.Navigation("ClaimsMapping");

                    b.Navigation("SigningCertificates");

                    b.Navigation("SingleLogoutServices");
                });
#pragma warning restore 612, 618
        }
    }
}
